<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simon.Api.Web</name>
    </assembly>
    <members>
        <member name="T:Simon.Api.Web.IocConfig">
            <summary>
            Represents the configuraion for the IoC.
            </summary>
        </member>
        <member name="M:Simon.Api.Web.IocConfig.RegisterDependencies">
            <summary>
            Registers the dependencies to the IoC container.
            </summary>
        </member>
        <member name="T:Simon.Api.Web.WebApiConfig">
            <summary>
            Represents the configuraion for the Web API.
            </summary>
        </member>
        <member name="M:Simon.Api.Web.WebApiConfig.Register(System.Web.Http.HttpConfiguration,System.Web.Http.Dependencies.IDependencyResolver)">
            <summary>
            Registers the HTTP route to the specified <paramref name="config"/> instance.
            </summary>
            <param name="config">The HTTP configuration.</param>
            <param name="dependencyResolver">The dependency resolver.</param>
        </member>
        <member name="T:Simon.Api.Web.Controllers.ProjectsController">
            <summary>
            API to manipulate project data.
            </summary>
        </member>
        <member name="M:Simon.Api.Web.Controllers.ProjectsController.#ctor(Simon.Infrastructure.IAsyncProcessFactory,Simon.Infrastructure.IAsyncPersistence{Simon.Project})">
            <summary>
            Initializes an instance of <see cref="T:Simon.Api.Web.Controllers.ProjectsController"/>.
            </summary>
            <param name="asyncProcessFactory">The async process factory.</param>
            <param name="projectPersistence">The project persistence.</param>
        </member>
        <member name="M:Simon.Api.Web.Controllers.ProjectsController.GetAsync">
            <summary>
            Gets the sequence of projects.
            </summary>
            <returns>
            A sequence of projects.
            </returns>
        </member>
        <member name="M:Simon.Api.Web.Controllers.ProjectsController.GetAsync(System.String)">
            <summary>
            Gets the project with the sepecifed <paramref name="id"/>.
            </summary>
            <param name="id">The ID of a project.</param>
            <returns>
            Project with the sepecifed <paramref name="id"/>.
            </returns>
        </member>
        <member name="M:Simon.Api.Web.Controllers.ProjectsController.PostAsync(Simon.Project)">
            <summary>
            Adds the specified <paramref name="project"/> to the sequence of projects.
            </summary>
            <param name="project">The project data taken from HTTP body.</param>
            <returns>
            Status of the addition.
            </returns>
        </member>
        <member name="M:Simon.Api.Web.Controllers.ProjectsController.PutAsync(System.String,Simon.Project)">
            <summary>
            Updates the specified <paramref name="project"/> with the specified <paramref name="id"/> in the sequence of projects.
            </summary>
            <param name="id">The ID of the project.</param>
            <param name="project">The project data taken from HTTP body.</param>
            <returns>
            Status of the addition.
            </returns>
        </member>
        <member name="M:Simon.Api.Web.Controllers.ProjectsController.DeleteAsync(System.String)">
            <summary>
            Deletes the project with the specified <paramref name="id"/> from the sequence of projects.
            </summary>
            <param name="id">The ID of a peoject.</param>
        </member>
        <member name="T:Simon.Api.Web.Controllers.SettingsController">
            <summary>
            API to manipulate project data.
            </summary>
        </member>
        <member name="M:Simon.Api.Web.Controllers.SettingsController.#ctor(Simon.Infrastructure.IAsyncProcessFactory,Simon.Infrastructure.IAsyncPersistence{Simon.Infrastructure.GlobalSettings})">
            <summary>
            Initializes an instance of <see cref="T:Simon.Api.Web.Controllers.SettingsController"/>.
            </summary>
            <param name="asyncProcessFactory">The async process factory.</param>
            <param name="globalSettingsPersistence">The global settings persistence.</param>
        </member>
        <member name="M:Simon.Api.Web.Controllers.SettingsController.GetAsync">
            <summary>
            Gets the global settings.
            </summary>
            <returns>
            The global settings.
            </returns>
        </member>
        <member name="M:Simon.Api.Web.Controllers.SettingsController.PutAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Updates the specified <paramref name="globalSettings"/>.
            </summary>
            <param name="globalSettings">The global settings taken from HTTP body.</param>
            <returns>
            Status of the addition.
            </returns>
        </member>
        <member name="T:Simon.Api.Web.Ioc.StructureMapAsyncProcessFactory">
            <summary>
            Represents the implementaion of <see cref="T:Simon.Infrastructure.IAsyncProcessFactory"/>
            using StructureMap IoC container.
            </summary>
        </member>
        <member name="M:Simon.Api.Web.Ioc.StructureMapAsyncProcessFactory.#ctor(StructureMap.IContainer)">
            <summary>
            Initializes an instance of <see cref="T:Simon.Api.Web.Ioc.StructureMapAsyncProcessFactory"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Simon.Api.Web.Ioc.StructureMapAsyncProcessFactory.CreateAsyncProcess``2(Simon.Infrastructure.GlobalSettings)">
            <summary>
            Creates an async process which takes a context of type <typeparamref name="TContext"/>
            and returns the result of type <typeparamref name="TResult"/>.
            </summary>
            <param name="globalSettings">The global settings.</param>
            <typeparam name="TContext">The type of context.</typeparam>
            <typeparam name="TResult">The type of result.</typeparam>
            <returns>An instacnce of <see cref="T:Simon.Infrastructure.IAsyncProcess`2"/>.</returns>
        </member>
        <member name="M:Simon.Api.Web.Ioc.StructureMapAsyncProcessFactory.CreateAsyncProcess``1(Simon.Infrastructure.GlobalSettings)">
            <summary>
            Creates an async process which takes  a context of type <typeparamref name="TContext"/>
            and does not return any value.
            </summary>
            <param name="globalSettings">The global settings.</param>
            <typeparam name="TContext">The type of context.</typeparam>
            <returns>An instacnce of <see cref="T:Simon.Infrastructure.IAsyncProcess`1"/>.</returns>
        </member>
        <member name="T:Simon.Api.Web.Ioc.StructureMapDependencyResolver">
            <summary>
            Defines the dependency resolver using structure map.
            </summary>
        </member>
        <member name="M:Simon.Api.Web.Ioc.StructureMapDependencyResolver.#ctor(StructureMap.IContainer)">
            <summary>
            Initializes an instance of <see cref="T:Simon.Api.Web.Ioc.StructureMapDependencyResolver"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Simon.Api.Web.Ioc.StructureMapDependencyResolver.BeginScope">
            <summary>
            Starts a resolution scope.
            </summary>
            <returns>The dependency scope.</returns>
        </member>
        <member name="M:Simon.Api.Web.Ioc.StructureMapDependencyResolver.GetService(System.Type)">
            <summary>
            Resolves singly registered services that support arbitrary object creation.
            </summary>
            <param name="serviceType">The type of the requested service or object.</param>
            <returns>
            The requested service or object.
            </returns>
        </member>
        <member name="M:Simon.Api.Web.Ioc.StructureMapDependencyResolver.GetServices(System.Type)">
            <summary>
            Resolves multiply registered services.
            </summary>
            <param name="serviceType">The type of the requested services.</param>
            <returns>
            The requested services.
            </returns>
        </member>
        <member name="M:Simon.Api.Web.Ioc.StructureMapDependencyResolver.DisposeManaged">
            <summary>
            Disposes the managed resources used in this class.
            </summary>
        </member>
        <member name="M:Simon.Api.Web.Ioc.StructureMapDependencyResolver.DisposeUnmanaged">
            <summary>
            Disposes the unmanaged resources used in this class.
            </summary>
        </member>
    </members>
</doc>
