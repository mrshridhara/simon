!function(e){"use strict";e.module("Simon",["ngRoute","Common","Projects","Applications"])}(angular),function(e){"use strict";function t(e){e.otherwise({redirectTo:"/"})}e.module("Simon").config(t),t.$inject=["$routeProvider"]}(angular),function(e){"use strict";e.module("Common",["ngRoute"])}(angular),function(e){"use strict";function t(e){e.when("/About",{templateUrl:"App/00_Common/03_Templates/About.html",controller:"About",controllerAs:"vm"}).when("/Settings",{templateUrl:"App/00_Common/03_Templates/Settings.html",controller:"Settings",controllerAs:"vm"})}e.module("Common").config(t),t.$inject=["$routeProvider"]}(angular),function(e){"use strict";e.module("Projects",["ngRoute","Common"])}(angular),function(e){"use strict";function t(e){e.when("/",{templateUrl:"App/01_Projects/03_Templates/Projects.html",controller:"Projects",controllerAs:"vm"}).when("/new-project",{templateUrl:"App/01_Projects/03_Templates/NewProject.html",controller:"NewProject",controllerAs:"vm"}).when("/:ProjectId",{templateUrl:"App/01_Projects/03_Templates/ProjectDetails.html",controller:"ProjectDetails",controllerAs:"vm"}).when("/:ProjectId/edit",{templateUrl:"App/01_Projects/03_Templates/EditProject.html",controller:"EditProject",controllerAs:"vm"})}e.module("Projects").config(t),t.$inject=["$routeProvider"]}(angular),function(e){"use strict";e.module("Applications",["ngRoute","Common","Projects"])}(angular),function(e){"use strict";function t(e){e.when("/:ProjectId/new-application",{templateUrl:"App/02_Applications/03_Templates/NewApplication.html",controller:"NewApplication",controllerAs:"vm"}).when("/:ProjectId/:ApplicationId",{templateUrl:"App/02_Applications/03_Templates/ApplicationDetails.html",controller:"ApplicationDetails",controllerAs:"vm"}).when("/:ProjectId/:ApplicationId/edit",{templateUrl:"App/02_Applications/03_Templates/EditApplication.html",controller:"EditApplication",controllerAs:"vm"})}e.module("Applications").config(t),t.$inject=["$routeProvider"]}(angular),function(e){"use strict";function t(){function e(e,t,o){(o.ngClick||""===o.href||"#"===o.href)&&t.on("click",function(e){e.preventDefault()})}return{restrict:"E",link:e}}e.module("Common").directive("a",t)}(angular),function(e){"use strict";function t(){var e=this;e.Title=""}e.module("Common").value("PageHeadService",new t)}(angular),function(e){"use strict";function t(){function t(){r.AboutMenu.Class="",r.SettingsMenu.Class=""}function n(t){t.get("/api/PluginPaths").success(function(t){r.Tools=e.fromJson(t)})}function i(t){t.get("/api/User").success(function(t){r.User=e.fromJson(t)})}var r=this;r.AboutMenu=new o("/About","About"),r.SettingsMenu=new o("/Settings","Settings"),r.Tools=void 0,r.User=void 0,r.DeactivateAll=t,r.LoadTools=n,r.LoadUser=i}function o(e,t){function o(){n.IsActive=!0,n.Class="active"}var n=this;n.IsActive=!1,n.Class="",n.Path=e,n.Text=t,n.SetAsActive=o}e.module("Common").value("NavbarService",new t)}(angular),function(e){"use strict";function t(){function e(){c.RootItem=void 0,c.IsVisible=!1}function t(){var e=[];return c.RootItem&&c.RootItem.AddTo(e),e}function n(e,t){c.IsVisible=!0,c.RootItem?(c.RootItem.Class="",c.RootItem.SetNextWith(e,t)):(c.RootItem=new o(e,t),c.RootItem.Class="active")}function i(){c.RootItem&&(c.RootItem.IsLast()?c.Reset():c.RootItem.RemoveLast())}function r(e){return c.RootItem?c.RootItem.LastContains(e):void 0}var c=this;c.RootItem=void 0,c.IsVisible=!1,c.Reset=e,c.GetItems=t,c.AddNew=n,c.RemoveLast=i,c.LastContains=r}function o(e,t){function n(e,t){a.Next?e?(a.Next.Class="",a.Next.SetNextWith(e,t)):a.Next.Next||(a.Class="active",a.Next=void 0):(a.Next=new o(e,t),a.Next.Class="active")}function i(e){e.push(a),a.Next&&a.Next.AddTo(e)}function r(){return!a.Next}function c(){a.Next&&(a.Next.IsLast()?(a.Class="active",a.Next=void 0):a.Next.RemoveLast())}function s(e){return a.IsLast()?a.Text.indexOf(e)>-1:a.Next.LastContains(e)}var a=this;a.Location=e.path(),a.Text=t,a.Next=void 0,a.Class="",a.SetNextWith=n,a.AddTo=i,a.IsLast=r,a.RemoveLast=c,a.LastContains=s}e.module("Common").value("BreadcrumbService",new t)}(angular),function(e){"use strict";function t(t,o,n){function i(){return t.get("/api/Settings").success(function(t){s.Settings=e.fromJson(t),e.forEach(s.Settings,function(e){e.Value.PluginName&&null!==e.Value.PluginName||(s.NonPluginSettings||(onePlugin.Settings=[]),s.NonPluginSettings.push(e))})}).error(function(e){s.Error=e})}function r(){return t.post("/api/Settings",s.Settings).success(function(){n.UpdateTools(t),o.path("/")}).error(function(e){s.Error=e})}function c(e){var t=s.Settings.indexOf(e);-1!=t&&s.Settings.splice(t,1)}var s=this;s.Settings=[],s.GetSettings=i,s.UpdateSettings=r,s.DeleteSettings=c}e.module("Common").service("SettingsService",t),t.$inject=["$http","$location","NavbarService"]}(angular),function(e){"use strict";function t(e){function t(){e.get("/api/SimonVersion/").success(function(e){o.Version=e.DisplayText})}var o=this;o.Version="",o.GetVersion=t}e.module("Common").service("SimonVersionService",t),t.$inject=["$http"]}(angular),function(e){"use strict";function t(t){function o(){return t.get("/api/Plugins").success(function(t){i.Plugins=e.fromJson(t)})}function n(t){e.forEach(i.Plugins,function(e){if(e.Settings){var o=e.Settings.indexOf(t);-1!=o&&e.Settings.splice(o,1)}})}var i=this;i.Plugins=void 0,i.GetPlugins=o,i.DeleteSettings=n}e.module("Common").service("PluginsService",t),t.$inject=["$http"]}(angular),function(e){"use strict";function t(e){var t=this;t.PageHeadService=e}e.module("Common").controller("PageHead",t),t.$inject=["PageHeadService"]}(angular),function(e){"use strict";function t(e,t,o){function n(){t.LoadTools(e),t.LoadUser(e),o.GetVersion()}var i=this;i.NavbarService=t,i.SimonVersionService=o,n()}e.module("Common").controller("Navbar",t),t.$inject=["$http","NavbarService","SimonVersionService"]}(angular),function(e){"use strict";function t(e){var t=this;t.BreadcrumbService=e}e.module("Common").controller("Breadcrumb",t),t.$inject=["BreadcrumbService"]}(angular),function(e){"use strict";function t(t,o,n,i,r,c){function s(){try{o.Title="Global settings",n.IsVisible=!1,i.DeactivateAll(),i.SettingsMenu.SetAsActive(),r.GetSettings().success(function(){u()}).error(function(e){l.Error=e})}catch(e){console.log(e)}}function a(e){r.DeleteSettings(e),c.DeleteSettings(e)}function u(){c.GetPlugins().error(function(e){l.Error=e}).success(function(){e.forEach(c.Plugins,function(t){e.forEach(r.Settings,function(e){t.Name===e.Value.PluginName&&(t.Settings||(t.Settings=[]),t.Settings.push(e))})})})}var l=this;l.Error=void 0,l.PageHeadService=o,l.BreadcrumbService=n,l.NavbarService=i,l.SettingsService=r,l.PluginsService=c,l.DeleteSettings=a,s()}e.module("Common").controller("Settings",t),t.$inject=["$location","PageHeadService","BreadcrumbService","NavbarService","SettingsService","PluginsService"]}(angular),function(e){"use strict";function t(e,t,o,n){function i(){t.Title="About",o.IsVisible=!1,n.DeactivateAll(),n.AboutMenu.SetAsActive()}var r=this;r.PageHeadService=t,r.BreadcrumbService=o,r.NavbarService=n,i()}e.module("Common").controller("About",t),t.$inject=["$location","PageHeadService","BreadcrumbService","NavbarService"]}(angular),function(e){"use strict";function t(){function e(){}e()}e.module("Common").controller("Footer",t)}(angular),function(e){"use strict";function t(t,o,n){function i(){return t.get("/api/projects").success(function(t){a.Projects=e.fromJson(t)}).error(function(e){a.Error=e})}function r(o){return t.get("/api/projects/"+o).success(function(t){a.SelectedProject=e.fromJson(t)}).error(function(e){a.Error=e})}function c(e){return t.post("/api/projects/",e).success(function(e){n.RemoveLast(),o.path("/"+e.Id)}).error(function(e){a.Error=e})}function s(){return t.post("/api/projects/",a.SelectedProject).success(function(){n.RemoveLast(),o.path("/"+a.SelectedProject.Id)}).error(function(e){a.Error=e})}var a=this;a.Projects=[],a.Error=void 0,a.SelectedProject=void 0,a.GetProjects=i,a.GetProjectDetails=r,a.AddProject=c,a.UpdateProject=s}e.module("Projects").service("ProjectsService",t),t.$inject=["$http","$location","BreadcrumbService"]}(angular),function(e){"use strict";function t(e,t,o,n,i){function r(){t.Title="Home",o.DeactivateAll(),i.GetProjects().success(function(){n.Reset(),n.AddNew(e,t.Title)})}var c=this;c.ProjectsService=i,r()}e.module("Projects").controller("Projects",t),t.$inject=["$location","PageHeadService","NavbarService","BreadcrumbService","ProjectsService"]}(angular),function(e){"use strict";function t(e,t,o,n,i,r){function c(){o.Title="Add New Project",n.DeactivateAll(),i.AddNew(e,o.Title)}var s=this;s.ProjectsService=r,s.NewProjectDetails={Name:"",Description:""},c()}e.module("Projects").controller("NewProject",t),t.$inject=["$location","$routeParams","PageHeadService","NavbarService","BreadcrumbService","ProjectsService"]}(angular),function(e){"use strict";function t(e,t,o,n,i,r){function c(){n.DeactivateAll(),r.GetProjectDetails(t.ProjectId).success(function(){o.Title=r.SelectedProject.Name,i.LastContains("Edit ")&&i.RemoveLast(),i.AddNew(e,o.Title)})}var s=this;s.ProjectsService=r,c()}e.module("Projects").controller("ProjectDetails",t),t.$inject=["$location","$routeParams","PageHeadService","NavbarService","BreadcrumbService","ProjectsService"]}(angular),function(e){"use strict";function t(e,t,o,n,i,r){function c(){n.DeactivateAll(),r.GetProjectDetails(t.ProjectId).success(function(){o.Title="Edit "+r.SelectedProject.Name,i.RemoveLast(),i.AddNew(e,o.Title)})}var s=this;s.ProjectsService=r,c()}e.module("Projects").controller("EditProject",t),t.$inject=["$location","$routeParams","PageHeadService","NavbarService","BreadcrumbService","ProjectsService"]}(angular),function(e){"use strict";function t(t,o,n){function i(o,n){return t.get("/api/applications?projectId="+o+"&applicationId="+n).success(function(t){s.SelectedApplication=e.fromJson(t)}).error(function(e){s.Error=e})}function r(e,i){return t.post("/api/applications?projectId="+e,i).success(function(t){n.RemoveLast(),o.path("/"+e+"/"+t.Id)}).error(function(e){s.Error=e})}function c(e){return t.post("/api/applications?projectId="+e,s.SelectedApplication).success(function(){n.RemoveLast(),o.path("/"+e+"/"+s.SelectedApplication.Id)}).error(function(e){s.Error=e})}var s=this;s.Applications=[],s.Error=void 0,s.SelectedApplication=void 0,s.GetApplicationDetails=i,s.AddApplication=r,s.UpdateApplication=c}e.module("Applications").service("ApplicationsService",t),t.$inject=["$http","$location","BreadcrumbService"]}(angular),function(e){"use strict";function t(e,t,o,n,i,r){function c(){o.Title="Add New Application",n.DeactivateAll(),i.AddNew(e,o.Title)}var s=this;s.ApplicationsService=r,s.ProductId=t.ProjectId,s.NewApplicationDetails={Name:"",Description:""},c()}e.module("Applications").controller("NewApplication",t),t.$inject=["$location","$routeParams","PageHeadService","NavbarService","BreadcrumbService","ApplicationsService"]}(angular),function(e){"use strict";function t(){}e.module("Applications").controller("ApplicationDetails",t),t.$inject=["$location","$routeParams","PageHeadService","NavbarService","BreadcrumbService","ApplicationsService"]}(angular),function(e){"use strict";function t(){}e.module("Applications").controller("EditApplication",t),t.$inject=["$location","$routeParams","PageHeadService","NavbarService","BreadcrumbService","ApplicationsService"]}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAwX1NpbW9uLk1vZHVsZS5qcyIsIjAxX1NpbW9uLlJvdXRlcy5qcyIsIjAwX0NvbW1vbi8wMF9Db21tb24uTW9kdWxlLmpzIiwiMDBfQ29tbW9uLzAxX0NvbW1vbi5Sb3V0ZXMuanMiLCIwMV9Qcm9qZWN0cy8wMF9Qcm9qZWN0cy5Nb2R1bGUuanMiLCIwMV9Qcm9qZWN0cy8wMV9Qcm9qZWN0cy5Sb3V0ZXMuanMiLCIwMl9BcHBsaWNhdGlvbnMvMDBfQXBwbGljYXRpb25zLk1vZHVsZS5qcyIsIjAyX0FwcGxpY2F0aW9ucy8wMV9BcHBsaWNhdGlvbnMuUm91dGVzLmpzIiwiMDBfQ29tbW9uLzAwX0RpcmVjdGl2ZXMvMDFfQW5jaG9yLkRpcmVjdGl2ZS5qcyIsIjAwX0NvbW1vbi8wMV9TZXJ2aWNlcy8wMV9QYWdlSGVhZC5TZXJ2aWNlLmpzIiwiMDBfQ29tbW9uLzAxX1NlcnZpY2VzLzAyX05hdmJhci5TZXJ2aWNlLmpzIiwiMDBfQ29tbW9uLzAxX1NlcnZpY2VzLzAzX0JyZWFkY3J1bWIuU2VydmljZS5qcyIsIjAwX0NvbW1vbi8wMV9TZXJ2aWNlcy8wNF9TZXR0aW5ncy5TZXJ2aWNlLmpzIiwiMDBfQ29tbW9uLzAxX1NlcnZpY2VzLzA1X1NpbW9uVmVyc2lvbi5TZXJ2aWNlLmpzIiwiMDBfQ29tbW9uLzAxX1NlcnZpY2VzLzA2X1BsdWdpbnMuU2VydmljZS5qcyIsIjAwX0NvbW1vbi8wMl9Db250cm9sbGVycy8wMV9QYWdlSGVhZC5Db250cm9sbGVyLmpzIiwiMDBfQ29tbW9uLzAyX0NvbnRyb2xsZXJzLzAyX05hdmJhci5Db250cm9sbGVyLmpzIiwiMDBfQ29tbW9uLzAyX0NvbnRyb2xsZXJzLzAzX0JyZWFkY3J1bWIuQ29udHJvbGxlci5qcyIsIjAwX0NvbW1vbi8wMl9Db250cm9sbGVycy8wNF9TZXR0aW5ncy5Db250cm9sbGVyLmpzIiwiMDBfQ29tbW9uLzAyX0NvbnRyb2xsZXJzLzA1X0Fib3V0LkNvbnRyb2xsZXIuanMiLCIwMF9Db21tb24vMDJfQ29udHJvbGxlcnMvMDZfRm9vdGVyLkNvbnRyb2xsZXIuanMiLCIwMV9Qcm9qZWN0cy8wMV9TZXJ2aWNlcy8wMV9Qcm9qZWN0cy5TZXJ2aWNlLmpzIiwiMDFfUHJvamVjdHMvMDJfQ29udHJvbGxlcnMvMDFfUHJvamVjdHMuQ29udHJvbGxlci5qcyIsIjAxX1Byb2plY3RzLzAyX0NvbnRyb2xsZXJzLzAyX05ld1Byb2plY3QuQ29udHJvbGxlci5qcyIsIjAxX1Byb2plY3RzLzAyX0NvbnRyb2xsZXJzLzAzX1Byb2plY3REZXRhaWxzLkNvbnRyb2xsZXIuanMiLCIwMV9Qcm9qZWN0cy8wMl9Db250cm9sbGVycy8wNF9FZGl0UHJvamVjdC5Db250cm9sbGVyLmpzIiwiMDJfQXBwbGljYXRpb25zLzAxX1NlcnZpY2VzLzAxX0FwcGxpY2F0aW9ucy5TZXJ2aWNlLmpzIiwiMDJfQXBwbGljYXRpb25zLzAyX0NvbnRyb2xsZXJzLzAxX05ld0FwcGxpY2F0aW9uLkNvbnRyb2xsZXIuanMiLCIwMl9BcHBsaWNhdGlvbnMvMDJfQ29udHJvbGxlcnMvMDJfQXBwbGljYXRpb25EZXRhaWxzLkNvbnRyb2xsZXIuanMiLCIwMl9BcHBsaWNhdGlvbnMvMDJfQ29udHJvbGxlcnMvMDNfRWRpdEFwcGxpY2F0aW9uLkNvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQSxHQUNJLFlBRUEsR0FBQSxPQUFBLFNBQ0ksVUFDQSxTQUNBLFdBQ0Esa0JBRVIsU0NUQSxTQUFBLEdBQ0ksWUFRQSxTQUFBLEdBQUEsR0FDSSxFQUFBLFdBQ0ksV0FBQSxNQVJSLEVBQ0ksT0FBQSxTQUNBLE9BQUEsR0FFSixFQUFBLFNBQUEsbUJBT0osU0NkQSxTQUFBLEdBQ0ksWUFFQSxHQUNJLE9BQUEsVUFBQSxhQUNSLFNDTEEsU0FBQSxHQUNJLFlBUUEsU0FBQSxHQUFBLEdBQ0ksRUFBQSxLQUFBLFVBQ0ksWUFBQSx3Q0FDQSxXQUFBLFFBQ0EsYUFBQSxPQUNKLEtBQUEsYUFDSSxZQUFBLDJDQUNBLFdBQUEsV0FDQSxhQUFBLE9BZFIsRUFDSSxPQUFBLFVBQ0EsT0FBQSxHQUVKLEVBQUEsU0FBQSxtQkFhSixTQ3BCQSxTQUFBLEdBQ0ksWUFFQSxHQUNJLE9BQUEsWUFDSSxVQUNBLFlBRVosU0NSQSxTQUFBLEdBQ0ksWUFRQSxTQUFBLEdBQUEsR0FDSSxFQUFBLEtBQUEsS0FDSSxZQUFBLDZDQUNBLFdBQUEsV0FDQSxhQUFBLE9BQ0osS0FBQSxnQkFDSSxZQUFBLCtDQUNBLFdBQUEsYUFDQSxhQUFBLE9BQ0osS0FBQSxlQUNJLFlBQUEsbURBQ0EsV0FBQSxpQkFDQSxhQUFBLE9BQ0osS0FBQSxvQkFDSSxZQUFBLGdEQUNBLFdBQUEsY0FDQSxhQUFBLE9BdEJSLEVBQ0ksT0FBQSxZQUNBLE9BQUEsR0FFSixFQUFBLFNBQUEsbUJBcUJKLFNDNUJBLFNBQUEsR0FDSSxZQUVBLEdBQ0ksT0FBQSxnQkFDSSxVQUNBLFNBQ0EsY0FFWixTQ1RBLFNBQUEsR0FDSSxZQVFBLFNBQUEsR0FBQSxHQUNJLEVBQUEsS0FBQSwrQkFDSSxZQUFBLHVEQUNBLFdBQUEsaUJBQ0EsYUFBQSxPQUNKLEtBQUEsOEJBQ0ksWUFBQSwyREFDQSxXQUFBLHFCQUNBLGFBQUEsT0FDSixLQUFBLG1DQUNJLFlBQUEsd0RBQ0EsV0FBQSxrQkFDQSxhQUFBLE9BbEJSLEVBQ0ksT0FBQSxnQkFDQSxPQUFBLEdBRUosRUFBQSxTQUFBLG1CQWlCSixTQ3hCQSxTQUFBLEdBQ0ksWUFNQSxTQUFBLEtBTUksUUFBQSxHQUFBLEVBQUEsRUFBQSxJQUNJLEVBQUEsU0FBQSxLQUFBLEVBQUEsTUFBQSxNQUFBLEVBQUEsT0FDSSxFQUFBLEdBQUEsUUFBQSxTQUFBLEdBQ0ksRUFBQSxtQkFSWixPQUNJLFNBQUEsSUFDQSxLQUFBLEdBUFIsRUFDSSxPQUFBLFVBQ0EsVUFBQSxJQUFhLElBZ0JyQixTQ3JCQSxTQUFBLEdBQ0ksWUFNQSxTQUFBLEtBRUksR0FBQSxHQUFBLElBRUEsR0FBQSxNQUFBLEdBUkosRUFDSSxPQUFBLFVBQ0EsTUFBQSxrQkFBQSxHQUFBLEtBUVIsU0NiQSxTQUFBLEdBQ0ksWUFNQSxTQUFBLEtBYUksUUFBQSxLQUNJLEVBQUEsVUFBQSxNQUFBLEdBQ0EsRUFBQSxhQUFBLE1BQUEsR0FHSixRQUFBLEdBQUEsR0FDSSxFQUFBLElBQUEsb0JBQUEsUUFBQSxTQUFBLEdBQ0ksRUFBQSxNQUFBLEVBQUEsU0FBQSxLQUlSLFFBQUEsR0FBQSxHQUNJLEVBQUEsSUFBQSxhQUFBLFFBQUEsU0FBQSxHQUNJLEVBQUEsS0FBQSxFQUFBLFNBQUEsS0F4QlIsR0FBQSxHQUFBLElBRUEsR0FBQSxVQUFBLEdBQUEsR0FBQSxTQUFBLFNBQ0EsRUFBQSxhQUFBLEdBQUEsR0FBQSxZQUFBLFlBQ0EsRUFBQSxNQUFBLE9BQ0EsRUFBQSxLQUFBLE9BRUEsRUFBQSxjQUFBLEVBQ0EsRUFBQSxVQUFBLEVBQ0EsRUFBQSxTQUFBLEVBb0JKLFFBQUEsR0FBQSxFQUFBLEdBV0ksUUFBQSxLQUNJLEVBQUEsVUFBQSxFQUNBLEVBQUEsTUFBQSxTQVhKLEdBQUEsR0FBQSxJQUVBLEdBQUEsVUFBQSxFQUNBLEVBQUEsTUFBQSxHQUNBLEVBQUEsS0FBQSxFQUNBLEVBQUEsS0FBQSxFQUVBLEVBQUEsWUFBQSxFQTVDSixFQUNJLE9BQUEsVUFDQSxNQUFBLGdCQUFBLEdBQUEsS0FpRFIsU0N0REEsU0FBQSxHQUNJLFlBTUEsU0FBQSxLQWFJLFFBQUEsS0FDSSxFQUFBLFNBQUEsT0FDQSxFQUFBLFdBQUEsRUFHSixRQUFBLEtBQ0ksR0FBQSxLQUlBLE9BSEEsR0FBQSxVQUNJLEVBQUEsU0FBQSxNQUFBLEdBRUosRUFHSixRQUFBLEdBQUEsRUFBQSxHQUNJLEVBQUEsV0FBQSxFQUNBLEVBQUEsVUFDSSxFQUFBLFNBQUEsTUFBQSxHQUNBLEVBQUEsU0FBQSxZQUFBLEVBQUEsS0FHQSxFQUFBLFNBQUEsR0FBQSxHQUFBLEVBQUEsR0FDQSxFQUFBLFNBQUEsTUFBQSxVQUlSLFFBQUEsS0FDSSxFQUFBLFdBQ0ksRUFBQSxTQUFBLFNBQ0ksRUFBQSxRQUdBLEVBQUEsU0FBQSxjQUtaLFFBQUEsR0FBQSxHQUNJLE1BQUEsR0FBQSxTQUNJLEVBQUEsU0FBQSxhQUFBLEdBREosT0FoREosR0FBQSxHQUFBLElBRUEsR0FBQSxTQUFBLE9BQ0EsRUFBQSxXQUFBLEVBRUEsRUFBQSxNQUFBLEVBQ0EsRUFBQSxTQUFBLEVBQ0EsRUFBQSxPQUFBLEVBQ0EsRUFBQSxXQUFBLEVBQ0EsRUFBQSxhQUFBLEVBNkNKLFFBQUEsR0FBQSxFQUFBLEdBZUksUUFBQSxHQUFBLEVBQUEsR0FDSSxFQUFBLEtBQ0ksR0FDSSxFQUFBLEtBQUEsTUFBQSxHQUNBLEVBQUEsS0FBQSxZQUFBLEVBQUEsSUFFSixFQUFBLEtBQUEsT0FDSSxFQUFBLE1BQUEsU0FDQSxFQUFBLEtBQUEsU0FJSixFQUFBLEtBQUEsR0FBQSxHQUFBLEVBQUEsR0FDQSxFQUFBLEtBQUEsTUFBQSxVQUlSLFFBQUEsR0FBQSxHQUNJLEVBQUEsS0FBQSxHQUNBLEVBQUEsTUFDSSxFQUFBLEtBQUEsTUFBQSxHQUlSLFFBQUEsS0FDSSxPQUFBLEVBQUEsS0FHSixRQUFBLEtBQ0ksRUFBQSxPQUNJLEVBQUEsS0FBQSxVQUNJLEVBQUEsTUFBQSxTQUNBLEVBQUEsS0FBQSxRQUdBLEVBQUEsS0FBQSxjQUtaLFFBQUEsR0FBQSxHQUNJLE1BQUEsR0FBQSxTQUNJLEVBQUEsS0FBQSxRQUFBLEdBQUEsR0FHQSxFQUFBLEtBQUEsYUFBQSxHQTFEUixHQUFBLEdBQUEsSUFFQSxHQUFBLFNBQUEsRUFBQSxPQUNBLEVBQUEsS0FBQSxFQUNBLEVBQUEsS0FBQSxPQUNBLEVBQUEsTUFBQSxHQUVBLEVBQUEsWUFBQSxFQUNBLEVBQUEsTUFBQSxFQUNBLEVBQUEsT0FBQSxFQUNBLEVBQUEsV0FBQSxFQUNBLEVBQUEsYUFBQSxFQXpFSixFQUNJLE9BQUEsVUFDQSxNQUFBLG9CQUFBLEdBQUEsS0EwSFIsU0MvSEEsU0FBQSxHQUNJLFlBWUEsU0FBQSxHQUFBLEVBQUEsRUFBQSxHQVVJLFFBQUEsS0FDSSxNQUFBLEdBQUEsSUFBQSxpQkFBQSxRQUFBLFNBQUEsR0FDSSxFQUFBLFNBQUEsRUFBQSxTQUFBLEdBQ0EsRUFBQSxRQUFBLEVBQUEsU0FBQSxTQUFBLEdBQ0ksRUFBQSxNQUFBLFlBQUEsT0FBQSxFQUFBLE1BQUEsYUFDSSxFQUFBLG9CQUNJLFVBQUEsYUFFSixFQUFBLGtCQUFBLEtBQUEsUUFHWixNQUFBLFNBQUEsR0FDSSxFQUFBLE1BQUEsSUFJUixRQUFBLEtBQ0ksTUFBQSxHQUFBLEtBQUEsZ0JBQUEsRUFBQSxVQUFBLFFBQUEsV0FDSSxFQUFBLFlBQUEsR0FDQSxFQUFBLEtBQUEsT0FDSixNQUFBLFNBQUEsR0FDSSxFQUFBLE1BQUEsSUFJUixRQUFBLEdBQUEsR0FDSSxHQUFBLEdBQUEsRUFBQSxTQUFBLFFBQUEsRUFDQSxLQUFBLEdBQ0ksRUFBQSxTQUFBLE9BQUEsRUFBQSxHQXBDUixHQUFBLEdBQUEsSUFFQSxHQUFBLFlBRUEsRUFBQSxZQUFBLEVBQ0EsRUFBQSxlQUFBLEVBQ0EsRUFBQSxlQUFBLEVBbEJKLEVBQ0ksT0FBQSxVQUNBLFFBQUEsa0JBQXlCLEdBRTdCLEVBQUEsU0FDSSxRQUNBLFlBQ0Esa0JBNkNSLFNDdkRBLFNBQUEsR0FDSSxZQVFBLFNBQUEsR0FBQSxHQVFJLFFBQUEsS0FDSSxFQUFBLElBQUEsc0JBQUEsUUFBQSxTQUFBLEdBQ0ksRUFBQSxRQUFBLEVBQUEsY0FSUixHQUFBLEdBQUEsSUFFQSxHQUFBLFFBQUEsR0FFQSxFQUFBLFdBQUEsRUFaSixFQUNJLE9BQUEsVUFDQSxRQUFBLHNCQUE2QixHQUVqQyxFQUFBLFNBQUEsVUFnQkosU0N2QkEsU0FBQSxHQUNJLFlBUUEsU0FBQSxHQUFBLEdBU0ksUUFBQSxLQUNJLE1BQUEsR0FBQSxJQUFBLGdCQUFBLFFBQUEsU0FBQSxHQUNJLEVBQUEsUUFBQSxFQUFBLFNBQUEsS0FJUixRQUFBLEdBQUEsR0FDSSxFQUFBLFFBQUEsRUFBQSxRQUFBLFNBQUEsR0FDSSxHQUFBLEVBQUEsU0FBQSxDQUNJLEdBQUEsR0FBQSxFQUFBLFNBQUEsUUFBQSxFQUNBLEtBQUEsR0FDSSxFQUFBLFNBQUEsT0FBQSxFQUFBLE1B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OlsiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ1NpbW9uJywgW1xyXG4gICAgICAgICduZ1JvdXRlJyxcclxuICAgICAgICAnQ29tbW9uJyxcclxuICAgICAgICAnUHJvamVjdHMnLFxyXG4gICAgICAgICdBcHBsaWNhdGlvbnMnXHJcbiAgICBdKTtcclxufShhbmd1bGFyKSk7IiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ1NpbW9uJylcclxuICAgICAgICAuY29uZmlnKGNvbmZpZyk7XHJcblxyXG4gICAgY29uZmlnLiRpbmplY3QgPSBbJyRyb3V0ZVByb3ZpZGVyJ107XHJcblxyXG4gICAgZnVuY3Rpb24gY29uZmlnKCRyb3V0ZVByb3ZpZGVyKSB7XHJcbiAgICAgICAgJHJvdXRlUHJvdmlkZXIub3RoZXJ3aXNlKHtcclxuICAgICAgICAgICAgcmVkaXJlY3RUbzogJy8nXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0oYW5ndWxhcikpOyIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdDb21tb24nLCBbJ25nUm91dGUnXSk7XHJcbn0oYW5ndWxhcikpOyIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdDb21tb24nKVxyXG4gICAgICAgIC5jb25maWcoY29uZmlnKTtcclxuXHJcbiAgICBjb25maWcuJGluamVjdCA9IFsnJHJvdXRlUHJvdmlkZXInXTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIpIHtcclxuICAgICAgICAkcm91dGVQcm92aWRlci53aGVuKCcvQWJvdXQnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnQXBwLzAwX0NvbW1vbi8wM19UZW1wbGF0ZXMvQWJvdXQuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBYm91dCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xyXG4gICAgICAgIH0pLndoZW4oJy9TZXR0aW5ncycsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdBcHAvMDBfQ29tbW9uLzAzX1RlbXBsYXRlcy9TZXR0aW5ncy5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1NldHRpbmdzJyxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0oYW5ndWxhcikpOyIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdQcm9qZWN0cycsIFtcclxuICAgICAgICAgICAgJ25nUm91dGUnLFxyXG4gICAgICAgICAgICAnQ29tbW9uJ1xyXG4gICAgICAgIF0pO1xyXG59KGFuZ3VsYXIpKTsiLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnUHJvamVjdHMnKVxyXG4gICAgICAgIC5jb25maWcoY29uZmlnKTtcclxuXHJcbiAgICBjb25maWcuJGluamVjdCA9IFsnJHJvdXRlUHJvdmlkZXInXTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIpIHtcclxuICAgICAgICAkcm91dGVQcm92aWRlci53aGVuKCcvJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ0FwcC8wMV9Qcm9qZWN0cy8wM19UZW1wbGF0ZXMvUHJvamVjdHMuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQcm9qZWN0cycsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xyXG4gICAgICAgIH0pLndoZW4oJy9uZXctcHJvamVjdCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdBcHAvMDFfUHJvamVjdHMvMDNfVGVtcGxhdGVzL05ld1Byb2plY3QuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdOZXdQcm9qZWN0JyxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nXHJcbiAgICAgICAgfSkud2hlbignLzpQcm9qZWN0SWQnLCB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnQXBwLzAxX1Byb2plY3RzLzAzX1RlbXBsYXRlcy9Qcm9qZWN0RGV0YWlscy5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1Byb2plY3REZXRhaWxzJyxcclxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nXHJcbiAgICAgICAgfSkud2hlbignLzpQcm9qZWN0SWQvZWRpdCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdBcHAvMDFfUHJvamVjdHMvMDNfVGVtcGxhdGVzL0VkaXRQcm9qZWN0Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnRWRpdFByb2plY3QnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufShhbmd1bGFyKSk7IiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ0FwcGxpY2F0aW9ucycsIFtcclxuICAgICAgICAgICAgJ25nUm91dGUnLFxyXG4gICAgICAgICAgICAnQ29tbW9uJyxcclxuICAgICAgICAgICAgJ1Byb2plY3RzJ1xyXG4gICAgICAgIF0pO1xyXG59KGFuZ3VsYXIpKTsiLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnQXBwbGljYXRpb25zJylcclxuICAgICAgICAuY29uZmlnKGNvbmZpZyk7XHJcblxyXG4gICAgY29uZmlnLiRpbmplY3QgPSBbJyRyb3V0ZVByb3ZpZGVyJ107XHJcblxyXG4gICAgZnVuY3Rpb24gY29uZmlnKCRyb3V0ZVByb3ZpZGVyKSB7XHJcbiAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbignLzpQcm9qZWN0SWQvbmV3LWFwcGxpY2F0aW9uJywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ0FwcC8wMl9BcHBsaWNhdGlvbnMvMDNfVGVtcGxhdGVzL05ld0FwcGxpY2F0aW9uLmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTmV3QXBwbGljYXRpb24nLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcclxuICAgICAgICB9KS53aGVuKCcvOlByb2plY3RJZC86QXBwbGljYXRpb25JZCcsIHtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdBcHAvMDJfQXBwbGljYXRpb25zLzAzX1RlbXBsYXRlcy9BcHBsaWNhdGlvbkRldGFpbHMuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBcHBsaWNhdGlvbkRldGFpbHMnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcclxuICAgICAgICB9KS53aGVuKCcvOlByb2plY3RJZC86QXBwbGljYXRpb25JZC9lZGl0Jywge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ0FwcC8wMl9BcHBsaWNhdGlvbnMvMDNfVGVtcGxhdGVzL0VkaXRBcHBsaWNhdGlvbi5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0VkaXRBcHBsaWNhdGlvbicsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KGFuZ3VsYXIpKTsiLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnQ29tbW9uJylcclxuICAgICAgICAuZGlyZWN0aXZlKCdhJywgYW5jaG9yKTtcclxuXHJcbiAgICBmdW5jdGlvbiBhbmNob3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgICAgICAgbGluazogbGlua1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW0sIGF0dHJzKSB7XHJcbiAgICAgICAgICAgIGlmIChhdHRycy5uZ0NsaWNrIHx8IGF0dHJzLmhyZWYgPT09ICcnIHx8IGF0dHJzLmhyZWYgPT09ICcjJykge1xyXG4gICAgICAgICAgICAgICAgZWxlbS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KGFuZ3VsYXIpKTsiLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnQ29tbW9uJylcclxuICAgICAgICAudmFsdWUoJ1BhZ2VIZWFkU2VydmljZScsIG5ldyBQYWdlSGVhZFNlcnZpY2UoKSk7XHJcblxyXG4gICAgZnVuY3Rpb24gUGFnZUhlYWRTZXJ2aWNlKCkge1xyXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHNlbGYuVGl0bGUgPSAnJztcclxuICAgIH1cclxufShhbmd1bGFyKSk7IiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ0NvbW1vbicpXHJcbiAgICAgICAgLnZhbHVlKCdOYXZiYXJTZXJ2aWNlJywgbmV3IE5hdmJhclNlcnZpY2UoKSk7XHJcblxyXG4gICAgZnVuY3Rpb24gTmF2YmFyU2VydmljZSgpIHtcclxuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICBzZWxmLkFib3V0TWVudSA9IG5ldyBOYXZiYXJNZW51KCcvQWJvdXQnLCAnQWJvdXQnKTtcclxuICAgICAgICBzZWxmLlNldHRpbmdzTWVudSA9IG5ldyBOYXZiYXJNZW51KCcvU2V0dGluZ3MnLCAnU2V0dGluZ3MnKTtcclxuICAgICAgICBzZWxmLlRvb2xzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHNlbGYuVXNlciA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgc2VsZi5EZWFjdGl2YXRlQWxsID0gZGVhY3RpdmF0ZUFsbDtcclxuICAgICAgICBzZWxmLkxvYWRUb29scyA9IGxvYWRUb29scztcclxuICAgICAgICBzZWxmLkxvYWRVc2VyID0gbG9hZFVzZXI7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRlYWN0aXZhdGVBbGwoKSB7XHJcbiAgICAgICAgICAgIHNlbGYuQWJvdXRNZW51LkNsYXNzID0gJyc7XHJcbiAgICAgICAgICAgIHNlbGYuU2V0dGluZ3NNZW51LkNsYXNzID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBsb2FkVG9vbHMoJGh0dHApIHtcclxuICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL1BsdWdpblBhdGhzJykuc3VjY2VzcyhmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLlRvb2xzID0gYW5ndWxhci5mcm9tSnNvbihyZXN1bHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRVc2VyKCRodHRwKSB7XHJcbiAgICAgICAgICAgICRodHRwLmdldCgnL2FwaS9Vc2VyJykuc3VjY2VzcyhmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLlVzZXIgPSBhbmd1bGFyLmZyb21Kc29uKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBOYXZiYXJNZW51KHBhdGgsIHRleHQpIHtcclxuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICBzZWxmLklzQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5DbGFzcyA9ICcnO1xyXG4gICAgICAgIHNlbGYuUGF0aCA9IHBhdGg7XHJcbiAgICAgICAgc2VsZi5UZXh0ID0gdGV4dDtcclxuXHJcbiAgICAgICAgc2VsZi5TZXRBc0FjdGl2ZSA9IHNldEFzQWN0aXZlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRBc0FjdGl2ZSgpIHtcclxuICAgICAgICAgICAgc2VsZi5Jc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHNlbGYuQ2xhc3MgPSAnYWN0aXZlJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0oYW5ndWxhcikpOyIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdDb21tb24nKVxyXG4gICAgICAgIC52YWx1ZSgnQnJlYWRjcnVtYlNlcnZpY2UnLCBuZXcgQnJlYWRjcnVtYlNlcnZpY2UoKSk7XHJcblxyXG4gICAgZnVuY3Rpb24gQnJlYWRjcnVtYlNlcnZpY2UoKSB7XHJcbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgc2VsZi5Sb290SXRlbSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBzZWxmLklzVmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBzZWxmLlJlc2V0ID0gcmVzZXQ7XHJcbiAgICAgICAgc2VsZi5HZXRJdGVtcyA9IGdldEl0ZW1zO1xyXG4gICAgICAgIHNlbGYuQWRkTmV3ID0gYWRkTmV3O1xyXG4gICAgICAgIHNlbGYuUmVtb3ZlTGFzdCA9IHJlbW92ZUxhc3Q7XHJcbiAgICAgICAgc2VsZi5MYXN0Q29udGFpbnMgPSBsYXN0Q29udGFpbnM7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xyXG4gICAgICAgICAgICBzZWxmLlJvb3RJdGVtID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBzZWxmLklzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0SXRlbXMoKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IFtdO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5Sb290SXRlbSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5Sb290SXRlbS5BZGRUbyhpdGVtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkTmV3KCRsb2NhdGlvbiwgdGV4dCkge1xyXG4gICAgICAgICAgICBzZWxmLklzVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLlJvb3RJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLlJvb3RJdGVtLkNsYXNzID0gJyc7XHJcbiAgICAgICAgICAgICAgICBzZWxmLlJvb3RJdGVtLlNldE5leHRXaXRoKCRsb2NhdGlvbiwgdGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLlJvb3RJdGVtID0gbmV3IEJyZWFkY3J1bWJJdGVtKCRsb2NhdGlvbiwgdGV4dCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLlJvb3RJdGVtLkNsYXNzID0gJ2FjdGl2ZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUxhc3QoKSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLlJvb3RJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5Sb290SXRlbS5Jc0xhc3QoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuUmVzZXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuUm9vdEl0ZW0uUmVtb3ZlTGFzdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBsYXN0Q29udGFpbnMoY29udGFpbnNUZXh0KSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLlJvb3RJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5Sb290SXRlbS5MYXN0Q29udGFpbnMoY29udGFpbnNUZXh0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBCcmVhZGNydW1iSXRlbSgkbG9jYXRpb24sIHRleHQpIHtcclxuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICBzZWxmLkxvY2F0aW9uID0gJGxvY2F0aW9uLnBhdGgoKTtcclxuICAgICAgICBzZWxmLlRleHQgPSB0ZXh0O1xyXG4gICAgICAgIHNlbGYuTmV4dCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBzZWxmLkNsYXNzID0gJyc7XHJcblxyXG4gICAgICAgIHNlbGYuU2V0TmV4dFdpdGggPSBzZXROZXh0V2l0aDtcclxuICAgICAgICBzZWxmLkFkZFRvID0gYWRkVG87XHJcbiAgICAgICAgc2VsZi5Jc0xhc3QgPSBpc0xhc3Q7XHJcbiAgICAgICAgc2VsZi5SZW1vdmVMYXN0ID0gcmVtb3ZlTGFzdDtcclxuICAgICAgICBzZWxmLkxhc3RDb250YWlucyA9IGxhc3RDb250YWlucztcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0TmV4dFdpdGgoJGxvY2F0aW9uLCB0ZXh0KSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLk5leHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkbG9jYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLk5leHQuQ2xhc3MgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLk5leHQuU2V0TmV4dFdpdGgoJGxvY2F0aW9uLCB0ZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFzZWxmLk5leHQuTmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuQ2xhc3MgPSAnYWN0aXZlJztcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLk5leHQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLk5leHQgPSBuZXcgQnJlYWRjcnVtYkl0ZW0oJGxvY2F0aW9uLCB0ZXh0KTtcclxuICAgICAgICAgICAgICAgIHNlbGYuTmV4dC5DbGFzcyA9ICdhY3RpdmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZGRUbyhpdGVtcykge1xyXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHNlbGYpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5OZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLk5leHQuQWRkVG8oaXRlbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpc0xhc3QoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhKHNlbGYuTmV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZW1vdmVMYXN0KCkge1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5OZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5OZXh0LklzTGFzdCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5DbGFzcyA9ICdhY3RpdmUnO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuTmV4dCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuTmV4dC5SZW1vdmVMYXN0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxhc3RDb250YWlucyhjb250YWluc1RleHQpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGYuSXNMYXN0KCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLlRleHQuaW5kZXhPZihjb250YWluc1RleHQpID4gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5OZXh0Lkxhc3RDb250YWlucyhjb250YWluc1RleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KGFuZ3VsYXIpKTsiLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnQ29tbW9uJylcclxuICAgICAgICAuc2VydmljZSgnU2V0dGluZ3NTZXJ2aWNlJywgc2V0dGluZ3NTZXJ2aWNlKTtcclxuXHJcbiAgICBzZXR0aW5nc1NlcnZpY2UuJGluamVjdCA9IFtcclxuICAgICAgICAnJGh0dHAnLFxyXG4gICAgICAgICckbG9jYXRpb24nLFxyXG4gICAgICAgICdOYXZiYXJTZXJ2aWNlJ1xyXG4gICAgXTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXR0aW5nc1NlcnZpY2UoJGh0dHAsICRsb2NhdGlvbiwgbmF2YmFyU2VydmljZSkge1xyXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHNlbGYuU2V0dGluZ3MgPSBbXTtcclxuXHJcbiAgICAgICAgc2VsZi5HZXRTZXR0aW5ncyA9IGdldFNldHRpbmdzO1xyXG4gICAgICAgIHNlbGYuVXBkYXRlU2V0dGluZ3MgPSB1cGRhdGVTZXR0aW5ncztcclxuICAgICAgICBzZWxmLkRlbGV0ZVNldHRpbmdzID0gZGVsZXRlU2V0dGluZ3M7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFNldHRpbmdzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL1NldHRpbmdzJykuc3VjY2VzcyhmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLlNldHRpbmdzID0gYW5ndWxhci5mcm9tSnNvbihyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYuU2V0dGluZ3MsIGZ1bmN0aW9uIChlYWNoU2V0dGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZWFjaFNldHRpbmcuVmFsdWUuUGx1Z2luTmFtZSB8fCBlYWNoU2V0dGluZy5WYWx1ZS5QbHVnaW5OYW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5Ob25QbHVnaW5TZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25lUGx1Z2luLlNldHRpbmdzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5Ob25QbHVnaW5TZXR0aW5ncy5wdXNoKGVhY2hTZXR0aW5nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5FcnJvciA9IHJlc3VsdDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVTZXR0aW5ncygpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvU2V0dGluZ3MnLCBzZWxmLlNldHRpbmdzKS5zdWNjZXNzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIG5hdmJhclNlcnZpY2UuVXBkYXRlVG9vbHMoJGh0dHApO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5FcnJvciA9IHJlc3VsdDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkZWxldGVTZXR0aW5ncyhzZXR0aW5nKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gc2VsZi5TZXR0aW5ncy5pbmRleE9mKHNldHRpbmcpO1xyXG4gICAgICAgICAgICBpZiAoaSAhPSAtMSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5TZXR0aW5ncy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0oYW5ndWxhcikpOyIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdDb21tb24nKVxyXG4gICAgICAgIC5zZXJ2aWNlKCdTaW1vblZlcnNpb25TZXJ2aWNlJywgc2ltb25WZXJzaW9uU2VydmljZSk7XHJcblxyXG4gICAgc2ltb25WZXJzaW9uU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCddO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNpbW9uVmVyc2lvblNlcnZpY2UoJGh0dHApIHtcclxuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICBzZWxmLlZlcnNpb24gPSAnJztcclxuXHJcbiAgICAgICAgc2VsZi5HZXRWZXJzaW9uID0gZ2V0VmVyc2lvbjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0VmVyc2lvbigpIHtcclxuICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL1NpbW9uVmVyc2lvbi8nKS5zdWNjZXNzKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuVmVyc2lvbiA9IHJlc3VsdC5EaXNwbGF5VGV4dDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KGFuZ3VsYXIpKTsiLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnQ29tbW9uJylcclxuICAgICAgICAuc2VydmljZSgnUGx1Z2luc1NlcnZpY2UnLCBwbHVnaW5zU2VydmljZSk7XHJcblxyXG4gICAgcGx1Z2luc1NlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBwbHVnaW5zU2VydmljZSgkaHR0cCkge1xyXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHNlbGYuUGx1Z2lucyA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgc2VsZi5HZXRQbHVnaW5zID0gZ2V0UGx1Z2lucztcclxuICAgICAgICBzZWxmLkRlbGV0ZVNldHRpbmdzID0gZGVsZXRlU2V0dGluZ3M7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFBsdWdpbnMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvUGx1Z2lucycpLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5QbHVnaW5zID0gYW5ndWxhci5mcm9tSnNvbihyZXN1bHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZVNldHRpbmdzKHNldHRpbmcpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGYuUGx1Z2lucywgZnVuY3Rpb24gKGVhY2hQbHVnaW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChlYWNoUGx1Z2luLlNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlYWNoUGx1Z2luLlNldHRpbmdzLmluZGV4T2Yoc2V0dGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWFjaFBsdWdpbi5TZXR0aW5ncy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0oYW5ndWxhcikpOyIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdDb21tb24nKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdQYWdlSGVhZCcsIHBhZ2VIZWFkKTtcclxuXHJcbiAgICBwYWdlSGVhZC4kaW5qZWN0ID0gWydQYWdlSGVhZFNlcnZpY2UnXTtcclxuXHJcbiAgICBmdW5jdGlvbiBwYWdlSGVhZChwYWdlSGVhZFNlcnZpY2UpIHtcclxuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5QYWdlSGVhZFNlcnZpY2UgPSBwYWdlSGVhZFNlcnZpY2U7XHJcbiAgICB9XHJcbn0oYW5ndWxhcikpOyIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdDb21tb24nKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdOYXZiYXInLCBuYXZiYXIpO1xyXG5cclxuICAgIG5hdmJhci4kaW5qZWN0ID0gW1xyXG4gICAgICAgICckaHR0cCcsXHJcbiAgICAgICAgJ05hdmJhclNlcnZpY2UnLFxyXG4gICAgICAgICdTaW1vblZlcnNpb25TZXJ2aWNlJ1xyXG4gICAgXTtcclxuXHJcbiAgICBmdW5jdGlvbiBuYXZiYXIoJGh0dHAsIG5hdmJhclNlcnZpY2UsIHNpbW9uVmVyc2lvblNlcnZpY2UpIHtcclxuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5OYXZiYXJTZXJ2aWNlID0gbmF2YmFyU2VydmljZTtcclxuICAgICAgICB2bS5TaW1vblZlcnNpb25TZXJ2aWNlID0gc2ltb25WZXJzaW9uU2VydmljZTtcclxuXHJcbiAgICAgICAgYWN0aXZhdGUoKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgICAgIG5hdmJhclNlcnZpY2UuTG9hZFRvb2xzKCRodHRwKTtcclxuICAgICAgICAgICAgbmF2YmFyU2VydmljZS5Mb2FkVXNlcigkaHR0cCk7XHJcbiAgICAgICAgICAgIHNpbW9uVmVyc2lvblNlcnZpY2UuR2V0VmVyc2lvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufShhbmd1bGFyKSk7IiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ0NvbW1vbicpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0JyZWFkY3J1bWInLCBicmVhZGNydW1iKTtcclxuXHJcbiAgICBicmVhZGNydW1iLiRpbmplY3QgPSBbJ0JyZWFkY3J1bWJTZXJ2aWNlJ107XHJcblxyXG4gICAgZnVuY3Rpb24gYnJlYWRjcnVtYihicmVhZGNydW1iU2VydmljZSkge1xyXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLkJyZWFkY3J1bWJTZXJ2aWNlID0gYnJlYWRjcnVtYlNlcnZpY2U7XHJcbiAgICB9XHJcbn0oYW5ndWxhcikpOyIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdDb21tb24nKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdTZXR0aW5ncycsIHNldHRpbmdzKTtcclxuXHJcbiAgICBzZXR0aW5ncy4kaW5qZWN0ID0gW1xyXG4gICAgICAgICckbG9jYXRpb24nLFxyXG4gICAgICAgICdQYWdlSGVhZFNlcnZpY2UnLFxyXG4gICAgICAgICdCcmVhZGNydW1iU2VydmljZScsXHJcbiAgICAgICAgJ05hdmJhclNlcnZpY2UnLFxyXG4gICAgICAgICdTZXR0aW5nc1NlcnZpY2UnLFxyXG4gICAgICAgICdQbHVnaW5zU2VydmljZSdcclxuICAgIF07XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0dGluZ3MoJGxvY2F0aW9uLCBwYWdlSGVhZFNlcnZpY2UsIGJyZWFkY3J1bWJTZXJ2aWNlLCBuYXZiYXJTZXJ2aWNlLCBzZXR0aW5nc1NlcnZpY2UsIHBsdWdpbnNTZXJ2aWNlKSB7XHJcbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uRXJyb3IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdm0uUGFnZUhlYWRTZXJ2aWNlID0gcGFnZUhlYWRTZXJ2aWNlO1xyXG4gICAgICAgIHZtLkJyZWFkY3J1bWJTZXJ2aWNlID0gYnJlYWRjcnVtYlNlcnZpY2U7XHJcbiAgICAgICAgdm0uTmF2YmFyU2VydmljZSA9IG5hdmJhclNlcnZpY2U7XHJcbiAgICAgICAgdm0uU2V0dGluZ3NTZXJ2aWNlID0gc2V0dGluZ3NTZXJ2aWNlO1xyXG4gICAgICAgIHZtLlBsdWdpbnNTZXJ2aWNlID0gcGx1Z2luc1NlcnZpY2U7XHJcblxyXG4gICAgICAgIHZtLkRlbGV0ZVNldHRpbmdzID0gZGVsZXRlU2V0dGluZ3M7XHJcblxyXG4gICAgICAgIGFjdGl2YXRlKCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcGFnZUhlYWRTZXJ2aWNlLlRpdGxlID0gXCJHbG9iYWwgc2V0dGluZ3NcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFkY3J1bWJTZXJ2aWNlLklzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgbmF2YmFyU2VydmljZS5EZWFjdGl2YXRlQWxsKCk7XHJcbiAgICAgICAgICAgICAgICBuYXZiYXJTZXJ2aWNlLlNldHRpbmdzTWVudS5TZXRBc0FjdGl2ZSgpO1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3NTZXJ2aWNlLkdldFNldHRpbmdzKClcclxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVBsdWdpbnMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLkVycm9yID0gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkZWxldGVTZXR0aW5ncyhzZXR0aW5nKSB7XHJcbiAgICAgICAgICAgIHNldHRpbmdzU2VydmljZS5EZWxldGVTZXR0aW5ncyhzZXR0aW5nKTtcclxuICAgICAgICAgICAgcGx1Z2luc1NlcnZpY2UuRGVsZXRlU2V0dGluZ3Moc2V0dGluZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVQbHVnaW5zKCkge1xyXG4gICAgICAgICAgICBwbHVnaW5zU2VydmljZS5HZXRQbHVnaW5zKClcclxuICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uRXJyb3IgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwbHVnaW5zU2VydmljZS5QbHVnaW5zLCBmdW5jdGlvbiAob25lUGx1Z2luKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzZXR0aW5nc1NlcnZpY2UuU2V0dGluZ3MsIGZ1bmN0aW9uIChvbmVTZXR0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob25lUGx1Z2luLk5hbWUgPT09IG9uZVNldHRpbmcuVmFsdWUuUGx1Z2luTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb25lUGx1Z2luLlNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZVBsdWdpbi5TZXR0aW5ncyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmVQbHVnaW4uU2V0dGluZ3MucHVzaChvbmVTZXR0aW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0oYW5ndWxhcikpOyIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdDb21tb24nKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdBYm91dCcsIGFib3V0KTtcclxuXHJcbiAgICBhYm91dC4kaW5qZWN0ID0gW1xyXG4gICAgICAgICckbG9jYXRpb24nLFxyXG4gICAgICAgICdQYWdlSGVhZFNlcnZpY2UnLFxyXG4gICAgICAgICdCcmVhZGNydW1iU2VydmljZScsXHJcbiAgICAgICAgJ05hdmJhclNlcnZpY2UnXHJcbiAgICBdO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFib3V0KCRsb2NhdGlvbiwgcGFnZUhlYWRTZXJ2aWNlLCBicmVhZGNydW1iU2VydmljZSwgbmF2YmFyU2VydmljZSkge1xyXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLlBhZ2VIZWFkU2VydmljZSA9IHBhZ2VIZWFkU2VydmljZTtcclxuICAgICAgICB2bS5CcmVhZGNydW1iU2VydmljZSA9IGJyZWFkY3J1bWJTZXJ2aWNlO1xyXG4gICAgICAgIHZtLk5hdmJhclNlcnZpY2UgPSBuYXZiYXJTZXJ2aWNlO1xyXG5cclxuICAgICAgICBhY3RpdmF0ZSgpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgICAgICAgcGFnZUhlYWRTZXJ2aWNlLlRpdGxlID0gXCJBYm91dFwiO1xyXG4gICAgICAgICAgICBicmVhZGNydW1iU2VydmljZS5Jc1Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgbmF2YmFyU2VydmljZS5EZWFjdGl2YXRlQWxsKCk7XHJcbiAgICAgICAgICAgIG5hdmJhclNlcnZpY2UuQWJvdXRNZW51LlNldEFzQWN0aXZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KGFuZ3VsYXIpKTsiLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnQ29tbW9uJylcclxuICAgICAgICAuY29udHJvbGxlcignRm9vdGVyJywgZm9vdGVyKTtcclxuXHJcbiAgICBmdW5jdGlvbiBmb290ZXIoKSB7XHJcbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIGFjdGl2YXRlKCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufShhbmd1bGFyKSk7IiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ1Byb2plY3RzJylcclxuICAgICAgICAuc2VydmljZSgnUHJvamVjdHNTZXJ2aWNlJywgcHJvamVjdHNTZXJ2aWNlKTtcclxuXHJcbiAgICBwcm9qZWN0c1NlcnZpY2UuJGluamVjdCA9IFtcclxuICAgICAgICAnJGh0dHAnLFxyXG4gICAgICAgICckbG9jYXRpb24nLFxyXG4gICAgICAgICdCcmVhZGNydW1iU2VydmljZSdcclxuICAgIF07XHJcblxyXG4gICAgZnVuY3Rpb24gcHJvamVjdHNTZXJ2aWNlKCRodHRwLCAkbG9jYXRpb24sIGJyZWFkY3J1bWJTZXJ2aWNlKSB7XHJcbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgc2VsZi5Qcm9qZWN0cyA9IFtdO1xyXG4gICAgICAgIHNlbGYuRXJyb3IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgc2VsZi5TZWxlY3RlZFByb2plY3QgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIHNlbGYuR2V0UHJvamVjdHMgPSBnZXRQcm9qZWN0cztcclxuICAgICAgICBzZWxmLkdldFByb2plY3REZXRhaWxzID0gZ2V0UHJvamVjdERldGFpbHM7XHJcbiAgICAgICAgc2VsZi5BZGRQcm9qZWN0ID0gYWRkUHJvamVjdDtcclxuICAgICAgICBzZWxmLlVwZGF0ZVByb2plY3QgPSB1cGRhdGVQcm9qZWN0O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRQcm9qZWN0cygpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wcm9qZWN0cycpLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5Qcm9qZWN0cyA9IGFuZ3VsYXIuZnJvbUpzb24ocmVzdWx0KTtcclxuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5FcnJvciA9IHJlc3VsdDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRQcm9qZWN0RGV0YWlscyhwcm9qZWN0SWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wcm9qZWN0cy8nICsgcHJvamVjdElkKS5zdWNjZXNzKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuU2VsZWN0ZWRQcm9qZWN0ID0gYW5ndWxhci5mcm9tSnNvbihyZXN1bHQpO1xyXG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLkVycm9yID0gcmVzdWx0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFkZFByb2plY3QobmV3UHJvamVjdERldGFpbHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcHJvamVjdHMvJywgbmV3UHJvamVjdERldGFpbHMpLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWRjcnVtYlNlcnZpY2UuUmVtb3ZlTGFzdCgpO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nICsgcmVzdWx0LklkKTtcclxuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5FcnJvciA9IHJlc3VsdDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVQcm9qZWN0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wcm9qZWN0cy8nLCBzZWxmLlNlbGVjdGVkUHJvamVjdCkuc3VjY2VzcyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhZGNydW1iU2VydmljZS5SZW1vdmVMYXN0KCk7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycgKyBzZWxmLlNlbGVjdGVkUHJvamVjdC5JZCk7XHJcbiAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuRXJyb3IgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufShhbmd1bGFyKSk7IiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ1Byb2plY3RzJylcclxuICAgICAgICAuY29udHJvbGxlcignUHJvamVjdHMnLCBwcm9qZWN0cyk7XHJcblxyXG4gICAgcHJvamVjdHMuJGluamVjdCA9IFtcclxuICAgICAgICAnJGxvY2F0aW9uJyxcclxuICAgICAgICAnUGFnZUhlYWRTZXJ2aWNlJyxcclxuICAgICAgICAnTmF2YmFyU2VydmljZScsXHJcbiAgICAgICAgJ0JyZWFkY3J1bWJTZXJ2aWNlJyxcclxuICAgICAgICAnUHJvamVjdHNTZXJ2aWNlJ1xyXG4gICAgXTtcclxuXHJcbiAgICBmdW5jdGlvbiBwcm9qZWN0cygkbG9jYXRpb24sIHBhZ2VIZWFkU2VydmljZSwgbmF2YmFyU2VydmljZSwgYnJlYWRjcnVtYlNlcnZpY2UsIHByb2plY3RzU2VydmljZSkge1xyXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLlByb2plY3RzU2VydmljZSA9IHByb2plY3RzU2VydmljZTtcclxuXHJcbiAgICAgICAgYWN0aXZhdGUoKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgICAgIHBhZ2VIZWFkU2VydmljZS5UaXRsZSA9ICdIb21lJztcclxuICAgICAgICAgICAgbmF2YmFyU2VydmljZS5EZWFjdGl2YXRlQWxsKCk7XHJcbiAgICAgICAgICAgIHByb2plY3RzU2VydmljZS5HZXRQcm9qZWN0cygpLnN1Y2Nlc3MoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWRjcnVtYlNlcnZpY2UuUmVzZXQoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFkY3J1bWJTZXJ2aWNlLkFkZE5ldygkbG9jYXRpb24sIHBhZ2VIZWFkU2VydmljZS5UaXRsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufShhbmd1bGFyKSk7IiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ1Byb2plY3RzJylcclxuICAgICAgICAuY29udHJvbGxlcignTmV3UHJvamVjdCcsIG5ld1Byb2plY3QpO1xyXG5cclxuICAgIG5ld1Byb2plY3QuJGluamVjdCA9IFtcclxuICAgICAgICAnJGxvY2F0aW9uJyxcclxuICAgICAgICAnJHJvdXRlUGFyYW1zJyxcclxuICAgICAgICAnUGFnZUhlYWRTZXJ2aWNlJyxcclxuICAgICAgICAnTmF2YmFyU2VydmljZScsXHJcbiAgICAgICAgJ0JyZWFkY3J1bWJTZXJ2aWNlJyxcclxuICAgICAgICAnUHJvamVjdHNTZXJ2aWNlJ1xyXG4gICAgXTtcclxuXHJcbiAgICBmdW5jdGlvbiBuZXdQcm9qZWN0KCRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCBwYWdlSGVhZFNlcnZpY2UsIG5hdmJhclNlcnZpY2UsIGJyZWFkY3J1bWJTZXJ2aWNlLCBwcm9qZWN0c1NlcnZpY2UpIHtcclxuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5Qcm9qZWN0c1NlcnZpY2UgPSBwcm9qZWN0c1NlcnZpY2U7XHJcbiAgICAgICAgdm0uTmV3UHJvamVjdERldGFpbHMgPSB7XHJcbiAgICAgICAgICAgIE5hbWU6ICcnLFxyXG4gICAgICAgICAgICBEZXNjcmlwdGlvbjogJydcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBhY3RpdmF0ZSgpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgICAgICAgcGFnZUhlYWRTZXJ2aWNlLlRpdGxlID0gJ0FkZCBOZXcgUHJvamVjdCc7XHJcbiAgICAgICAgICAgIG5hdmJhclNlcnZpY2UuRGVhY3RpdmF0ZUFsbCgpO1xyXG4gICAgICAgICAgICBicmVhZGNydW1iU2VydmljZS5BZGROZXcoJGxvY2F0aW9uLCBwYWdlSGVhZFNlcnZpY2UuVGl0bGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufShhbmd1bGFyKSk7IiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ1Byb2plY3RzJylcclxuICAgICAgICAuY29udHJvbGxlcignUHJvamVjdERldGFpbHMnLCBwcm9qZWN0RGV0YWlscyk7XHJcblxyXG4gICAgcHJvamVjdERldGFpbHMuJGluamVjdCA9IFtcclxuICAgICAgICAnJGxvY2F0aW9uJyxcclxuICAgICAgICAnJHJvdXRlUGFyYW1zJyxcclxuICAgICAgICAnUGFnZUhlYWRTZXJ2aWNlJyxcclxuICAgICAgICAnTmF2YmFyU2VydmljZScsXHJcbiAgICAgICAgJ0JyZWFkY3J1bWJTZXJ2aWNlJyxcclxuICAgICAgICAnUHJvamVjdHNTZXJ2aWNlJ1xyXG4gICAgXTtcclxuXHJcbiAgICBmdW5jdGlvbiBwcm9qZWN0RGV0YWlscygkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgcGFnZUhlYWRTZXJ2aWNlLCBuYXZiYXJTZXJ2aWNlLCBicmVhZGNydW1iU2VydmljZSwgcHJvamVjdHNTZXJ2aWNlKSB7XHJcbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uUHJvamVjdHNTZXJ2aWNlID0gcHJvamVjdHNTZXJ2aWNlO1xyXG5cclxuICAgICAgICBhY3RpdmF0ZSgpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgICAgICAgbmF2YmFyU2VydmljZS5EZWFjdGl2YXRlQWxsKCk7XHJcbiAgICAgICAgICAgIHByb2plY3RzU2VydmljZS5HZXRQcm9qZWN0RGV0YWlscygkcm91dGVQYXJhbXMuUHJvamVjdElkKS5zdWNjZXNzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHBhZ2VIZWFkU2VydmljZS5UaXRsZSA9IHByb2plY3RzU2VydmljZS5TZWxlY3RlZFByb2plY3QuTmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYnJlYWRjcnVtYlNlcnZpY2UuTGFzdENvbnRhaW5zKCdFZGl0ICcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWRjcnVtYlNlcnZpY2UuUmVtb3ZlTGFzdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWRjcnVtYlNlcnZpY2UuQWRkTmV3KCRsb2NhdGlvbiwgcGFnZUhlYWRTZXJ2aWNlLlRpdGxlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KGFuZ3VsYXIpKTsiLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnUHJvamVjdHMnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdFZGl0UHJvamVjdCcsIGVkaXRQcm9qZWN0KTtcclxuXHJcbiAgICBlZGl0UHJvamVjdC4kaW5qZWN0ID0gW1xyXG4gICAgICAgICckbG9jYXRpb24nLFxyXG4gICAgICAgICckcm91dGVQYXJhbXMnLFxyXG4gICAgICAgICdQYWdlSGVhZFNlcnZpY2UnLFxyXG4gICAgICAgICdOYXZiYXJTZXJ2aWNlJyxcclxuICAgICAgICAnQnJlYWRjcnVtYlNlcnZpY2UnLFxyXG4gICAgICAgICdQcm9qZWN0c1NlcnZpY2UnXHJcbiAgICBdO1xyXG5cclxuICAgIGZ1bmN0aW9uIGVkaXRQcm9qZWN0KCRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCBwYWdlSGVhZFNlcnZpY2UsIG5hdmJhclNlcnZpY2UsIGJyZWFkY3J1bWJTZXJ2aWNlLCBwcm9qZWN0c1NlcnZpY2UpIHtcclxuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5Qcm9qZWN0c1NlcnZpY2UgPSBwcm9qZWN0c1NlcnZpY2U7XHJcblxyXG4gICAgICAgIGFjdGl2YXRlKCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG4gICAgICAgICAgICBuYXZiYXJTZXJ2aWNlLkRlYWN0aXZhdGVBbGwoKTtcclxuICAgICAgICAgICAgcHJvamVjdHNTZXJ2aWNlLkdldFByb2plY3REZXRhaWxzKCRyb3V0ZVBhcmFtcy5Qcm9qZWN0SWQpLnN1Y2Nlc3MoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcGFnZUhlYWRTZXJ2aWNlLlRpdGxlID0gJ0VkaXQgJyArIHByb2plY3RzU2VydmljZS5TZWxlY3RlZFByb2plY3QuTmFtZTtcclxuICAgICAgICAgICAgICAgIGJyZWFkY3J1bWJTZXJ2aWNlLlJlbW92ZUxhc3QoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFkY3J1bWJTZXJ2aWNlLkFkZE5ldygkbG9jYXRpb24sIHBhZ2VIZWFkU2VydmljZS5UaXRsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufShhbmd1bGFyKSk7IiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ0FwcGxpY2F0aW9ucycpXHJcbiAgICAgICAgLnNlcnZpY2UoJ0FwcGxpY2F0aW9uc1NlcnZpY2UnLCBhcHBsaWNhdGlvbnNTZXJ2aWNlKTtcclxuXHJcbiAgICBhcHBsaWNhdGlvbnNTZXJ2aWNlLiRpbmplY3QgPSBbXHJcbiAgICAgICAgJyRodHRwJyxcclxuICAgICAgICAnJGxvY2F0aW9uJyxcclxuICAgICAgICAnQnJlYWRjcnVtYlNlcnZpY2UnXHJcbiAgICBdO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFwcGxpY2F0aW9uc1NlcnZpY2UoJGh0dHAsICRsb2NhdGlvbiwgYnJlYWRjcnVtYlNlcnZpY2UpIHtcclxuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICBzZWxmLkFwcGxpY2F0aW9ucyA9IFtdO1xyXG4gICAgICAgIHNlbGYuRXJyb3IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgc2VsZi5TZWxlY3RlZEFwcGxpY2F0aW9uID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBzZWxmLkdldEFwcGxpY2F0aW9uRGV0YWlscyA9IGdldEFwcGxpY2F0aW9uRGV0YWlscztcclxuICAgICAgICBzZWxmLkFkZEFwcGxpY2F0aW9uID0gYWRkQXBwbGljYXRpb247XHJcbiAgICAgICAgc2VsZi5VcGRhdGVBcHBsaWNhdGlvbiA9IHVwZGF0ZUFwcGxpY2F0aW9uO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRBcHBsaWNhdGlvbkRldGFpbHMocHJvamVjdElkLCBhcHBsaWNhdGlvbklkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvYXBwbGljYXRpb25zP3Byb2plY3RJZD0nICsgcHJvamVjdElkICsgJyZhcHBsaWNhdGlvbklkPScgKyBhcHBsaWNhdGlvbklkKS5zdWNjZXNzKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuU2VsZWN0ZWRBcHBsaWNhdGlvbiA9IGFuZ3VsYXIuZnJvbUpzb24ocmVzdWx0KTtcclxuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5FcnJvciA9IHJlc3VsdDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZGRBcHBsaWNhdGlvbihwcm9qZWN0SWQsIG5ld0FwcGxpY2F0aW9uRGV0YWlscykge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9hcHBsaWNhdGlvbnM/cHJvamVjdElkPScgKyBwcm9qZWN0SWQsIG5ld0FwcGxpY2F0aW9uRGV0YWlscykuc3VjY2VzcyhmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBicmVhZGNydW1iU2VydmljZS5SZW1vdmVMYXN0KCk7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycgKyBwcm9qZWN0SWQgKyAnLycgKyByZXN1bHQuSWQpO1xyXG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLkVycm9yID0gcmVzdWx0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUFwcGxpY2F0aW9uKHByb2plY3RJZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9hcHBsaWNhdGlvbnM/cHJvamVjdElkPScgKyBwcm9qZWN0SWQsIHNlbGYuU2VsZWN0ZWRBcHBsaWNhdGlvbikuc3VjY2VzcyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhZGNydW1iU2VydmljZS5SZW1vdmVMYXN0KCk7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycgKyBwcm9qZWN0SWQgKyAnLycgKyBzZWxmLlNlbGVjdGVkQXBwbGljYXRpb24uSWQpO1xyXG4gICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLkVycm9yID0gcmVzdWx0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0oYW5ndWxhcikpOyIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdBcHBsaWNhdGlvbnMnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdOZXdBcHBsaWNhdGlvbicsIG5ld0FwcGxpY2F0aW9uKTtcclxuXHJcbiAgICBuZXdBcHBsaWNhdGlvbi4kaW5qZWN0ID0gW1xyXG4gICAgICAgICckbG9jYXRpb24nLFxyXG4gICAgICAgICckcm91dGVQYXJhbXMnLFxyXG4gICAgICAgICdQYWdlSGVhZFNlcnZpY2UnLFxyXG4gICAgICAgICdOYXZiYXJTZXJ2aWNlJyxcclxuICAgICAgICAnQnJlYWRjcnVtYlNlcnZpY2UnLFxyXG4gICAgICAgICdBcHBsaWNhdGlvbnNTZXJ2aWNlJ1xyXG4gICAgXTtcclxuXHJcbiAgICBmdW5jdGlvbiBuZXdBcHBsaWNhdGlvbigkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgcGFnZUhlYWRTZXJ2aWNlLCBuYXZiYXJTZXJ2aWNlLCBicmVhZGNydW1iU2VydmljZSwgYXBwbGljYXRpb25zU2VydmljZSkge1xyXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLkFwcGxpY2F0aW9uc1NlcnZpY2UgPSBhcHBsaWNhdGlvbnNTZXJ2aWNlO1xyXG4gICAgICAgIHZtLlByb2R1Y3RJZCA9ICRyb3V0ZVBhcmFtcy5Qcm9qZWN0SWQ7XHJcbiAgICAgICAgdm0uTmV3QXBwbGljYXRpb25EZXRhaWxzID0ge1xyXG4gICAgICAgICAgICBOYW1lOiAnJyxcclxuICAgICAgICAgICAgRGVzY3JpcHRpb246ICcnXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgYWN0aXZhdGUoKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgICAgIHBhZ2VIZWFkU2VydmljZS5UaXRsZSA9ICdBZGQgTmV3IEFwcGxpY2F0aW9uJztcclxuICAgICAgICAgICAgbmF2YmFyU2VydmljZS5EZWFjdGl2YXRlQWxsKCk7XHJcbiAgICAgICAgICAgIGJyZWFkY3J1bWJTZXJ2aWNlLkFkZE5ldygkbG9jYXRpb24sIHBhZ2VIZWFkU2VydmljZS5UaXRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KGFuZ3VsYXIpKTsiLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnQXBwbGljYXRpb25zJylcclxuICAgICAgICAuY29udHJvbGxlcignQXBwbGljYXRpb25EZXRhaWxzJywgYXBwbGljYXRpb25EZXRhaWxzKTtcclxuXHJcbiAgICBhcHBsaWNhdGlvbkRldGFpbHMuJGluamVjdCA9IFtcclxuICAgICAgICAnJGxvY2F0aW9uJyxcclxuICAgICAgICAnJHJvdXRlUGFyYW1zJyxcclxuICAgICAgICAnUGFnZUhlYWRTZXJ2aWNlJyxcclxuICAgICAgICAnTmF2YmFyU2VydmljZScsXHJcbiAgICAgICAgJ0JyZWFkY3J1bWJTZXJ2aWNlJyxcclxuICAgICAgICAnQXBwbGljYXRpb25zU2VydmljZSdcclxuICAgIF07XHJcblxyXG4gICAgZnVuY3Rpb24gYXBwbGljYXRpb25EZXRhaWxzKCRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCBwYWdlSGVhZFNlcnZpY2UsIG5hdmJhclNlcnZpY2UsIGJyZWFkY3J1bWJTZXJ2aWNlLCBhcHBsaWNhdGlvbnNTZXJ2aWNlKSB7XHJcbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xyXG4gICAgfVxyXG59KGFuZ3VsYXIpKTsiLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnQXBwbGljYXRpb25zJylcclxuICAgICAgICAuY29udHJvbGxlcignRWRpdEFwcGxpY2F0aW9uJywgZWRpdEFwcGxpY2F0aW9uKTtcclxuXHJcbiAgICBlZGl0QXBwbGljYXRpb24uJGluamVjdCA9IFtcclxuICAgICAgICAnJGxvY2F0aW9uJyxcclxuICAgICAgICAnJHJvdXRlUGFyYW1zJyxcclxuICAgICAgICAnUGFnZUhlYWRTZXJ2aWNlJyxcclxuICAgICAgICAnTmF2YmFyU2VydmljZScsXHJcbiAgICAgICAgJ0JyZWFkY3J1bWJTZXJ2aWNlJyxcclxuICAgICAgICAnQXBwbGljYXRpb25zU2VydmljZSdcclxuICAgIF07XHJcblxyXG4gICAgZnVuY3Rpb24gZWRpdEFwcGxpY2F0aW9uKCRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCBwYWdlSGVhZFNlcnZpY2UsIG5hdmJhclNlcnZpY2UsIGJyZWFkY3J1bWJTZXJ2aWNlLCBhcHBsaWNhdGlvbnNTZXJ2aWNlKSB7XHJcbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xyXG4gICAgfVxyXG59KGFuZ3VsYXIpKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=